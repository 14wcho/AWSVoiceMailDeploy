{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/handler/global-settings.js","webpack:///./src/service/global-settings.services.js","webpack:///./src/domain/global-settings.domain.js","webpack:///./src/repo/global-repo.js","webpack:///external \"aws-sdk\"","webpack:///./src/lib/dynamo.js","webpack:///./src/lib/responder.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","globalSettingsService","update","async","event","context","transcribeVoicemail","encryptVoicemail","deliveryEmail","availableSMSCountries","JSON","parse","body","console","log","then","result","Response","settings","catch","err","Error","getSettings","GlobalSettingsService","globalRepo","this","getGlobalSettings","transcribe","encrypt","updateGlobalSettings","stringify","Attributes","createGlobalSettings","process","env","DELIVERY_EMAIL","GlobalSettings","globalSettingsMap","AVAILABLE_SMS_COUNTRIES","split","dynamo","GLOBAL_TABLE_NAME","amazonConnectInstanceArn","AMAZON_CONNECT_INSTANCE_ARN","params","Key","instanceArn","getItem","item","Item","put","_updateGlobalSettings","ExpressionAttributeValues","UpdateExpression","require","AWS","DynamoDBService","tableName","client","DynamoDB","DocumentClient","promise","query","Items","scan","data","LastEvaluatedKey","next","Buffer","from","toString","callback","batch","startingIndex","Promise","resolve","reject","_batchWrite","length","index","batchWrite","nextData","endIndex","batchToUpdate","slice","batchParam","RequestItems","ALLOW_ORIGIN_HEADER","Responder","statusCode","cors","customHeaders","response","headers","error","description","errorMessage","errorName","errorStack","developerMessage","message","stack"],"mappings":"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","file":"global-settings.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1064);\n","/******************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.                                           *                                                                                                                   *\n *  Licensed under the Apache License Version 2.0 (the 'License'). You may not\n *  use this file except in compliance with the License. A copy of the License\n *  is located at                                                            \n *                                                                                                                   \n *      http://www.apache.org/licenses/                                                                                   *                                                                                                                  \n *  or in the 'license' file accompanying this file. This file is distributed on\n *  an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or\n *  implied. See the License for the specific language governing permissions and\n *  limitations under the License.                                                                                \n******************************************************************************/\n\nimport {GlobalSettingsService} from \"../service/global-settings.services\";\nimport {GlobalRepo} from \"../repo/global-repo\";\nimport {Responder} from \"../lib/responder\";\n\nconst globalSettingsService = new GlobalSettingsService(new GlobalRepo());\n\nexports.update = async (event, context) => {\n    let {transcribeVoicemail, encryptVoicemail, deliveryEmail, availableSMSCountries} = JSON.parse(event.body);\n    console.log(\"Update Global Settings\");\n    return globalSettingsService.update(transcribeVoicemail, encryptVoicemail, deliveryEmail, availableSMSCountries)\n        .then(result => Responder.Response(200, {settings: result}, true))\n        .catch(err => Responder.Error(400, err, \"Unable to update global settings\", true));\n};\n\nexports.get = async (event, context) => {\n    console.log(\"Update Global Settings\");\n    return globalSettingsService.getSettings()\n        .then(result => Responder.Response(200, {settings: result}, true))\n        .catch(err => Responder.Error(400, err, \"Unable to update global settings\", true));\n};","/******************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved. \n *  Licensed under the Apache License Version 2.0 (the 'License'). You may not\n *  use this file except in compliance with the License. A copy of the License\n *  is located at                                                            \n *                                                                              \n *      http://www.apache.org/licenses/                                        \n *  or in the 'license' file accompanying this file. This file is distributed on\n *  an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or\n *  implied. See the License for the specific language governing permissions and\n *  limitations under the License.                                              \n******************************************************************************/\n\nclass GlobalSettingsService {\n\n    constructor(globalRepo) {\n        this.globalRepo = globalRepo;\n    }\n\n    getSettings() {\n        return this.globalRepo.getGlobalSettings();\n    }\n\n    update(transcribe, encrypt, deliveryEmail, availableSMSCountries) {\n        return this.globalRepo.updateGlobalSettings(transcribe, encrypt, deliveryEmail, availableSMSCountries)\n            .then(result => {\n                console.log(\"Result: \" + JSON.stringify(result));\n                let {transcribeVoicemail, encryptVoicemail, deliveryEmail, availableSMSCountries} = result.Attributes;\n                return {\n                    transcribeVoicemail,\n                    encryptVoicemail,\n                    deliveryEmail,\n                    availableSMSCountries\n                };\n            });\n    }\n\n    createDefault() {\n        return this.globalRepo.createGlobalSettings(true, true, process.env.DELIVERY_EMAIL);\n    }\n\n}\n\nexport {GlobalSettingsService};","/******************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.                                           *                                                                                                                   *\n *  Licensed under the Apache License Version 2.0 (the 'License'). You may not\n *  use this file except in compliance with the License. A copy of the License\n *  is located at                                                            \n *                                                                                                                   \n *      http://www.apache.org/licenses/                                                                                   *                                                                                                                  \n *  or in the 'license' file accompanying this file. This file is distributed on\n *  an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or\n *  implied. See the License for the specific language governing permissions and\n *  limitations under the License.                                                                                \n******************************************************************************/\n\nclass GlobalSettings {\n\n    constructor(globalSettingsMap) {\n        this.transcribeVoicemail = globalSettingsMap[\"transcribeVoicemail\"] || false;\n        this.encryptVoicemail = globalSettingsMap[\"encryptVoicemail\"] || false;\n        this.deliveryEmail = globalSettingsMap[\"deliveryEmail\"] || null;\n        this.availableSMSCountries = globalSettingsMap[\"availableSMSCountries\"] || (process.env.AVAILABLE_SMS_COUNTRIES || \"\").split(\",\");\n    }\n\n}\n\nexport {GlobalSettings};","/******************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved. \n *  Licensed under the Apache License Version 2.0 (the 'License'). You may not\n *  use this file except in compliance with the License. A copy of the License\n *  is located at                                                            \n *                                                                              \n *      http://www.apache.org/licenses/                                        \n *  or in the 'license' file accompanying this file. This file is distributed on\n *  an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or\n *  implied. See the License for the specific language governing permissions and\n *  limitations under the License.                                              \n******************************************************************************/\n\nimport {DynamoDBService} from \"../lib/dynamo\";\nimport {GlobalSettings} from \"../domain/global-settings.domain\";\n\nclass GlobalRepo {\n\n    constructor() {\n        this.dynamo = new DynamoDBService(process.env.GLOBAL_TABLE_NAME);\n        this.amazonConnectInstanceArn = process.env.AMAZON_CONNECT_INSTANCE_ARN;\n    }\n\n    getGlobalSettings() {\n        console.log(\"Getting Global Settings\");\n        let params = {\n            Key: {\n                instanceArn: this.amazonConnectInstanceArn\n            }\n        };\n        return this.dynamo.getItem(params).then(item => {\n            return item ? new GlobalSettings(item) : null;\n        });\n    }\n\n    createGlobalSettings(transcribeVoicemail, encryptVoicemail, deliveryEmail, availableSMSCountries) {\n        let settings = new GlobalSettings({transcribeVoicemail, encryptVoicemail, deliveryEmail, availableSMSCountries});\n        settings.instanceArn = this.amazonConnectInstanceArn;\n        let params = {\n            Item: settings\n        };\n        console.log(\"dynamo put\");\n        return this.dynamo.put(params).then(() => settings);\n    }\n\n    updateGlobalSettings(transcribeVoicemail, encryptVoicemail, deliveryEmail, availableSMSCountries) {\n        return this.getGlobalSettings().then(settings => {\n            if (settings) {\n                return this._updateGlobalSettings(transcribeVoicemail, encryptVoicemail, deliveryEmail, availableSMSCountries);\n            } else {\n                console.log(\"in create\");\n                return this.createGlobalSettings(transcribeVoicemail, encryptVoicemail, deliveryEmail, availableSMSCountries);\n            }\n        });\n    }\n\n    _updateGlobalSettings(transcribeVoicemail, encryptVoicemail, deliveryEmail, availableSMSCountries) {\n        let params = {\n            Key: {\n                instanceArn: this.amazonConnectInstanceArn\n            },\n            ExpressionAttributeValues: {\n                \":tv\": transcribeVoicemail,\n                \":ev\": encryptVoicemail,\n                \":de\": deliveryEmail,\n                \":ac\": availableSMSCountries\n            },\n            UpdateExpression: \"SET transcribeVoicemail=:tv, encryptVoicemail=:ev, deliveryEmail=:de, availableSMSCountries=:ac\"\n        };\n        return this.dynamo.update(params);\n    }\n}\n\nexport {GlobalRepo};","module.exports = require(\"aws-sdk\");","/******************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved. \n *  Licensed under the Apache License Version 2.0 (the 'License'). You may not\n *  use this file except in compliance with the License. A copy of the License\n *  is located at                                                            \n *                                                                              \n *      http://www.apache.org/licenses/                                        \n *  or in the 'license' file accompanying this file. This file is distributed on\n *  an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or\n *  implied. See the License for the specific language governing permissions and\n *  limitations under the License.                                              \n******************************************************************************/\n\nconst AWS = require(\"aws-sdk\");\n\nclass DynamoDBService {\n\n    constructor(tableName) {\n        this.tableName = tableName;\n        this.client = new AWS.DynamoDB.DocumentClient();\n    }\n\n    /**\n     * @param params\n     * @returns {Promise<Object>}\n     */\n    update(params) {\n        params[\"TableName\"] = this.tableName;\n        params[\"ReturnValues\"] = \"ALL_NEW\";\n        return this.client.update(params).promise();\n    }\n\n    put(params) {\n        params[\"TableName\"] = this.tableName;\n        return this.client.put(params).promise();\n    }\n\n    /**\n     * @param params\n     * @returns {Promise<DocumentClient.AttributeMap[] | null>}\n     */\n    query(params) {\n        params[\"TableName\"] = this.tableName;\n        return this.client.query(params).promise().then(result => result.Items || null);\n    }\n\n    scan(params) {\n        params[\"TableName\"] = this.tableName;\n        return this.client.scan(params).promise().then(result => {\n            return result.Items || null\n        });\n    }\n\n    queryWithNext(params) {\n      params[\"TableName\"] = this.tableName;\n      return this.client.query(params).promise().then(result => {\n        let data = {\n          data: result.Items || []\n        };\n        if(result.LastEvaluatedKey) {\n          data.next = Buffer.from(JSON.stringify(result.LastEvaluatedKey), 'utf8').toString('base64');\n        }\n        return data;\n      });\n    }\n\n    scanWithNext(params) {\n        params[\"TableName\"] = this.tableName;\n        return this.client.scan(params).promise().then(result => {\n            let data = {\n                data: result.Items || []\n            };\n            if(result.LastEvaluatedKey) {\n                data.next = Buffer.from(JSON.stringify(result.LastEvaluatedKey), 'utf8').toString('base64');\n            }\n            return data;\n        });\n    }\n\n    /**\n     * @param params\n     * @param callback\n     * @returns {Promise<DocumentClient.AttributeMap | null>}\n     */\n    getItem(params, callback) {\n        params[\"TableName\"] = this.tableName;\n        return this.client.get(params).promise().then(result => result.Item || null);\n    }\n\n    batchWrite(batch, startingIndex) {\n        return new Promise((resolve, reject) => {\n            this._batchWrite(batch, startingIndex).then(result => {\n                if (batch.length > result.index) {\n                    this.batchWrite(batch, result.index).then(nextData => {\n                        resolve(nextData);\n                    });\n                } else {\n                    resolve(result.data);\n                }\n            });\n        });\n    }\n\n    _batchWrite(batch, startingIndex) {\n        return new Promise((resolve, reject) => {\n            // DDB has a limit of 25 items at once\n            let maxDdbUpdate = 24;\n            let endIndex = (batch.length > startingIndex + maxDdbUpdate) ? startingIndex + maxDdbUpdate : batch.length;\n            let batchToUpdate = batch.slice(startingIndex, endIndex);\n\n            let batchParam = {\n                RequestItems: {\n                    [this.tableName]: batchToUpdate\n                }\n            };\n            this.client.batchWrite(batchParam, (err, data) => {\n                if (err) {\n                    console.log(\"Any error? \" + JSON.stringify(err, null, 2));\n                }\n                resolve({'index': startingIndex + maxDdbUpdate, 'data': data});\n            });\n        });\n    }\n}\n\nexport {DynamoDBService};","/******************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved. \n *  Licensed under the Apache License Version 2.0 (the 'License'). You may not\n *  use this file except in compliance with the License. A copy of the License\n *  is located at                                                            \n *                                                                              \n *      http://www.apache.org/licenses/                                        \n *  or in the 'license' file accompanying this file. This file is distributed on\n *  an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or\n *  implied. See the License for the specific language governing permissions and\n *  limitations under the License.                                              \n******************************************************************************/\n\nconst ALLOW_ORIGIN_HEADER = {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Credentials': true,\n    'Strict-Transport-Security': 'max-age=31536000; includeSubDomains',\n    'X-Frame-Options': 'DENY'\n};\n\nfunction Response(statusCode, body = {}, cors = false, customHeaders = null) {\n    let response = {\n        statusCode,\n        body: JSON.stringify(body)\n    };\n\n    if (cors) {\n        response[\"headers\"] = ALLOW_ORIGIN_HEADER;\n    }\n\n    if (customHeaders) {\n        let headers = response[\"headers\"];\n        headers = {\n            ...headers,\n            ...customHeaders\n        };\n        response[\"headers\"] = headers;\n    }\n\n    return response;\n}\n\nfunction Error(statusCode, error, description, cors = false) {\n    console.log(error, (error instanceof Error), error.toString());\n    let errorMessage = \"\";\n    let errorName = \"Error\";\n    let errorStack = \"\";\n    let developerMessage = \"\";\n\n    if (error.hasOwnProperty(\"message\")) {\n        errorMessage = error.message;\n    }\n    if (error.hasOwnProperty(\"name\")) {\n        errorName = error.name;\n    }\n    if (error.hasOwnProperty(\"stack\")) {\n        errorStack = error.stack;\n    }\n\n    if (error.hasOwnProperty(\"developerMessage\")) {\n        developerMessage = error.developerMessage;\n    }\n\n    let response = {\n        statusCode,\n        body: JSON.stringify({\n            errorMessage: description,\n            // Uncomment the following lines for descriptive error messages.\n            /*_error: {\n                message: errorMessage,\n                name: errorName,\n                stack: errorStack,\n                developerMessage\n            }*/\n        })\n    };\n\n    if (cors) {\n        response[\"headers\"] = ALLOW_ORIGIN_HEADER;\n    }\n\n    console.log(\"Error:\", response);\n    return response;\n}\n\nconst Responder = {\n    Response,\n    Error\n};\n\nexport {Responder};\n"],"sourceRoot":""}