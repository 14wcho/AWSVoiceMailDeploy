{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/repo/users-repo.js","webpack:///./src/service/global-settings.services.js","webpack:///./src/domain/connect-agent.domain.js","webpack:///./src/errors/agent.errors.js","webpack:///./src/service/connect-agent.service.js","webpack:///./src/domain/connect-user.domain.js","webpack:///./src/service/connect.service.js","webpack:///./src/domain/global-settings.domain.js","webpack:///./src/repo/global-repo.js","webpack:///./src/errors/standard.errors.js","webpack:///./src/repo/voicemail.repo.js","webpack:///./src/service/notification.service.js","webpack:///external \"nodemailer\"","webpack:///./src/service/s3.service.js","webpack:///./src/service/transcription.service.js","webpack:///external \"request-promise\"","webpack:///./src/domain/voicemail.domain.js","webpack:///./src/service/voicemail.service.js","webpack:///external \"aws-sdk\"","webpack:///./src/lib/dynamo.js","webpack:///./src/domain/agent.domain.js","webpack:///./src/handler/voicemail.js","webpack:///external \"awesome-phonenumber\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","UsersRepo","this","dynamo","process","env","USERS_TABLE_NAME","amazonConnectInstanceId","AMAZON_CONNECT_INSTANCE_ARN","extension","params","IndexName","KeyConditionExpression","ExpressionAttributeValues","query","then","items","length","userId","Key","agentId","getItem","item","next","size","param","Limit","Select","ExclusiveStartKey","JSON","parse","Buffer","from","toString","scanWithNext","scan","agent","data","Item","createAgentData","put","deliverSMSPhoneNumber","deliverSMS","deliverEmail","encryptVoicemail","transcribeVoicemail","expressionAttrValues","email","sms","enabled","phoneNumber","updateExpression","UpdateExpression","update","values","batchWrite","GlobalSettingsService","globalRepo","getGlobalSettings","transcribe","encrypt","deliveryEmail","availableSMSCountries","updateGlobalSettings","result","console","log","stringify","Attributes","createGlobalSettings","DELIVERY_EMAIL","ConnectAgent","connectUser","super","connectService","usersRepo","getAgentByExtension","getConnectUser","user","getAgentByUserId","getAgents","Promise","all","listConnectUsers","getAllAgents","connectUsers","dbUsers","needUpdate","forEach","found","find","dbUser","Id","username","Username","push","PutRequest","createAgentCreateParam","DeleteRequest","createAgentDeleteParam","_validateAgentUpdate","createAgentIfNeeded","updateAgentById","getConnectAgentByUserId","createAgentPromise","createAgent","resolve","reject","undefined","phone","isValid","getNumber","Number","isNaN","ConnectUser","userMap","detail","arn","firstName","lastName","phoneType","autoAccept","deskPhoneNumber","directoryUserId","routingProfileId","AWS","instanceId","split","connect","Connect","maxBackOffTime","users","promises","map","InstanceId","UserId","describeUser","err","User","_listConnectUsers","list","nextToken","retry","MaxResults","listUsers","promise","UserSummaryList","NextToken","concat","callback","catch","warn","Math","min","pow","setTimeout","GlobalSettings","globalSettingsMap","AVAILABLE_SMS_COUNTRIES","GLOBAL_TABLE_NAME","amazonConnectInstanceArn","instanceArn","settings","_updateGlobalSettings","GenericError","Error","message","developerMessage","MissingParameterError","parameter","InvalidParameterError","MissingParametersError","ContactVoicemailRepo","CONTACT_VOICEMAIL_TABLE_NAME","contactId","timestamp","status","queryParam","queryResult","readerId","DeliveryOptionSettings","DeliveryContent","transcription","preSignedUrl","audioFile","NotificationService","s3Service","transcriptionService","ses","SES","sns","SNS","transporter","createTransport","recordingExpiration","parseInt","SIGNED_RECORDING_URL_EXP","globalSettings","voicemail","connectAgent","options","getTranscribeAndEncryptionSettings","deliveryOptions","shouldSendEmail","shouldSendSMS","contactEmail","agentSMSPhoneNumber","getDeliveryContents","contents","sendTextMessage","sendMail","transcriptionPromise","preSignedUrlPromise","audioFilePromise","getPreSignedUrl","recordingBucketName","recordingObjectKey","getFile","jobName","getTranscriptJobName","getTranscriptForJobName","fromEmailAddress","toEmailAddress","deliveryContent","html","Date","contactPhoneNumber","transcripts","transcript","floor","now","expires","url","mailOptions","subject","to","filename","content","Body","info","deliveryPhoneNumber","Message","PhoneNumber","publish","shouldTranscribe","shouldEncrypt","require","S3Service","s3","S3","bucket","Bucket","getObject","Expires","getSignedUrl","TranscriptionService","TranscribeService","TranscriptionJobName","getTranscriptionJob","transcriptionJob","method","uri","TranscriptionJob","Transcript","TranscriptFileUri","json","results","ContactVoicemail","voicemailMap","transcribeStatus","recordingUrl","recordingBucketRegion","voicemailRepo","agentService","notificationService","globalSettingsService","jobNameSplit","updateTranscriptionStatus","eventName","newRecord","oldRecord","newVoicemail","_deliver","getSettings","deliver","DynamoDBService","tableName","client","DynamoDB","DocumentClient","Items","LastEvaluatedKey","batch","startingIndex","_batchWrite","index","nextData","endIndex","batchToUpdate","slice","batchParam","RequestItems","Agent","agentMap","voicemailService","stream","async","event","context","Records","record","Converter","unmarshall","dynamodb","NewImage","OldImage","processVoicemailRecords","lambdaResult","error"],"mappings":"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","file":"voicemail.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 885);\n","/******************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved. \n *  Licensed under the Apache License Version 2.0 (the 'License'). You may not\n *  use this file except in compliance with the License. A copy of the License\n *  is located at                                                            \n *                                                                              \n *      http://www.apache.org/licenses/                                        \n *  or in the 'license' file accompanying this file. This file is distributed on\n *  an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or\n *  implied. See the License for the specific language governing permissions and\n *  limitations under the License.                                              \n******************************************************************************/\n\nimport {DynamoDBService} from \"../lib/dynamo\";\nimport {Agent} from \"../domain/agent.domain\";\n\nclass UsersRepo {\n\n    constructor() {\n        this.dynamo = new DynamoDBService(process.env.USERS_TABLE_NAME);\n        this.amazonConnectInstanceId = process.env.AMAZON_CONNECT_INSTANCE_ARN;\n    }\n\n    /**\n     * @param extension\n     * @returns {Promise<object>}\n     */\n    getAgentByExtension(extension) {\n        let params = {\n            IndexName: \"AgentExtensionIndex\",\n            KeyConditionExpression: \"extension = :ext\",\n            ExpressionAttributeValues: {\n                \":ext\": extension\n            },\n        };\n        return this.dynamo.query(params)\n            .then(items => {\n                return items.length > 0 ? new Agent(items[0]) : null;\n            });\n    }\n\n    getAgentByUserId(userId) {\n        let params = {\n            Key: {\n                agentId: userId\n            }\n        };\n        return this.dynamo.getItem(params).then(item => {\n            return item ? new Agent(item) : null;\n        });\n    }\n\n    getAgents(next, size) {\n        let param = {\n            Limit: size || 1000,\n            Select: \"ALL_ATTRIBUTES\"\n        };\n\n        if (next) {\n            param.ExclusiveStartKey = JSON.parse(Buffer.from(next, 'base64').toString('utf-8'));\n        }\n\n        return this.dynamo\n            .scanWithNext(param);\n    }\n\n    getAllAgents() {\n        return this.dynamo\n            .scan({\n                Select: \"ALL_ATTRIBUTES\"\n            });\n    }\n\n    createAgentCreateParam(agent) {\n        let data = {\n            Item: {\n                ...agent,\n                agentId: agent.userId\n            }\n        };\n        if (agent.extension === \"\") {\n            delete data.Item.extension;\n        }\n\n        return data;\n    }\n\n    createAgentDeleteParam(agent) {\n        return {\n            Key: {\n                agentId: agent.userId\n            }\n        };\n    }\n\n    createAgent(agent) {\n        let params = this.createAgentData(agent)\n        return this.dynamo.put(params);\n    }\n\n    updateAgentById(agentId, {extension, deliverSMSPhoneNumber, deliverSMS, deliverEmail, encryptVoicemail, transcribeVoicemail}) {\n        let expressionAttrValues = {\n            \":tv\": transcribeVoicemail || false,\n            \":ev\": encryptVoicemail || false,\n            \":de\": deliverEmail,\n            \":do\": {\n                email: deliverEmail,\n                sms: {\n                    enabled: deliverSMS,\n                    phoneNumber: deliverSMSPhoneNumber === \"\" ? \"null\" : deliverSMSPhoneNumber\n                }\n\n            }\n        };\n\n        if (extension !== null && extension !== \"\") {\n            expressionAttrValues[\":ext\"] = extension;\n        }\n        let updateExpression = \"SET transcribeVoicemail=:tv, encryptVoicemail = :ev, deliveryEmail = :de, deliveryOptions = :do\";\n        (extension === null || extension === \"\") ? updateExpression += ` REMOVE extension` : updateExpression += `, extension = :ext`;\n\n        let params = {\n            Key: {\n                agentId: agentId\n            },\n            ExpressionAttributeValues: expressionAttrValues,\n            UpdateExpression: updateExpression\n        };\n        return this.dynamo.update(params);\n    }\n\n    batchWrite(values) {\n        return this.dynamo.batchWrite(values, 0);\n    }\n}\n\nexport {UsersRepo};","/******************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved. \n *  Licensed under the Apache License Version 2.0 (the 'License'). You may not\n *  use this file except in compliance with the License. A copy of the License\n *  is located at                                                            \n *                                                                              \n *      http://www.apache.org/licenses/                                        \n *  or in the 'license' file accompanying this file. This file is distributed on\n *  an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or\n *  implied. See the License for the specific language governing permissions and\n *  limitations under the License.                                              \n******************************************************************************/\n\nclass GlobalSettingsService {\n\n    constructor(globalRepo) {\n        this.globalRepo = globalRepo;\n    }\n\n    getSettings() {\n        return this.globalRepo.getGlobalSettings();\n    }\n\n    update(transcribe, encrypt, deliveryEmail, availableSMSCountries) {\n        return this.globalRepo.updateGlobalSettings(transcribe, encrypt, deliveryEmail, availableSMSCountries)\n            .then(result => {\n                console.log(\"Result: \" + JSON.stringify(result));\n                let {transcribeVoicemail, encryptVoicemail, deliveryEmail, availableSMSCountries} = result.Attributes;\n                return {\n                    transcribeVoicemail,\n                    encryptVoicemail,\n                    deliveryEmail,\n                    availableSMSCountries\n                };\n            });\n    }\n\n    createDefault() {\n        return this.globalRepo.createGlobalSettings(true, true, process.env.DELIVERY_EMAIL);\n    }\n\n}\n\nexport {GlobalSettingsService};","/******************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.                                           *                                                                                                                   *\n *  Licensed under the Apache License Version 2.0 (the 'License'). You may not\n *  use this file except in compliance with the License. A copy of the License\n *  is located at                                                            \n *                                                                                                                   \n *      http://www.apache.org/licenses/                                                                                   *                                                                                                                  \n *  or in the 'license' file accompanying this file. This file is distributed on\n *  an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or\n *  implied. See the License for the specific language governing permissions and\n *  limitations under the License.                                                                                \n******************************************************************************/\n\nclass ConnectAgent {\n\n    /**\n     * @param {Agent} agent\n     * @param {ConnectUser} connectUser\n     */\n    constructor(agent, connectUser) {\n        this.userId = agent.userId;\n        this.agent = agent;\n        this.connectUser = connectUser;\n    }\n\n}\n\nexport {ConnectAgent};","/******************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.                                           *                                                                                                                   *\n *  Licensed under the Apache License Version 2.0 (the 'License'). You may not\n *  use this file except in compliance with the License. A copy of the License\n *  is located at                                                            \n *                                                                                                                   \n *      http://www.apache.org/licenses/                                                                                   *                                                                                                                  \n *  or in the 'license' file accompanying this file. This file is distributed on\n *  an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or\n *  implied. See the License for the specific language governing permissions and\n *  limitations under the License.                                                                                \n******************************************************************************/\n\nimport {GenericError} from \"./standard.errors\";\n\nclass ExtensionNumberRequiredError extends GenericError {\n    constructor() {\n        super(\n            \"ExtensionNumberRequiredError\",\n            \"Please provide an extension number.\",\n            \"Extension number is required to update an agent\"\n        );\n    }\n}\n\nclass ExtensionInUseError extends GenericError {\n    constructor(extension) {\n        super(\n            \"ExtensionInUseError\",\n            \"Extension already in use. Please provide a different extension number.\",\n            `Cannot have more than one user assigned to the extension number: ${extension}`\n        );\n    }\n}\n\nexport {\n    ExtensionNumberRequiredError,\n    ExtensionInUseError\n};","/******************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved. \n *  Licensed under the Apache License Version 2.0 (the 'License'). You may not\n *  use this file except in compliance with the License. A copy of the License\n *  is located at                                                            \n *                                                                              \n *      http://www.apache.org/licenses/                                        \n *  or in the 'license' file accompanying this file. This file is distributed on\n *  an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or\n *  implied. See the License for the specific language governing permissions and\n *  limitations under the License.                                              \n******************************************************************************/\n\nimport {ConnectAgent} from \"../domain/connect-agent.domain\";\nimport {\n    MissingParameterError,\n    InvalidParameterError, MissingParametersError, GenericError\n} from \"../errors/standard.errors\";\nimport {Agent} from \"../domain/agent.domain\";\nimport {\n    ExtensionInUseError\n} from \"../errors/agent.errors\";\n\nimport PhoneNumber from 'awesome-phonenumber';\n\nclass ConnectAgentService {\n\n    constructor(connectService, usersRepo) {\n        this.usersRepo = usersRepo;\n        this.connectService = connectService;\n    }\n\n    /**\n     * @param extension\n     * @returns {Promise<ConnectAgent>}\n     */\n    getConnectAgentByExtension(extension) {\n        return this.usersRepo.getAgentByExtension(extension)\n            .then(agent => this.connectService.getConnectUser(agent.userId)\n                .then(connectUser => new ConnectAgent(agent, connectUser)));\n    }\n\n    /**\n     * @param userId\n     * @returns {Promise<ConnectAgent>}\n     */\n    getConnectAgentByUserId(userId) {\n        return this.connectService.getConnectUser(userId)\n            .then(user => this.usersRepo.getAgentByUserId(userId)\n                .then(agent => new ConnectAgent(agent, user)));\n    }\n\n    /**\n     * @returns {Promise<ConnectAgent[]>}\n     */\n    getConnectAgents(next, size) {\n        return this.usersRepo.getAgents(next, size);\n    }\n\n    syncConnectAgents() {\n        // collect all users in the system\n        return Promise.all([this.connectService.listConnectUsers(), this.usersRepo.getAllAgents()])\n            .then(values => {\n                let [connectUsers, dbUsers] = values;\n                let needUpdate = [];\n\n                connectUsers.forEach(connectUser => {\n                    const found = dbUsers.find(dbUser => dbUser.userId === connectUser.Id);\n                    let agent;\n                    if (found && found.username !== connectUser.Username) {\n                        agent = {\n                            ...found,\n                            username: connectUser.Username\n                        };\n                        needUpdate.push({PutRequest:this.usersRepo.createAgentCreateParam(agent)});\n                    } else if (!found) {\n                        agent = {\n                            userId: connectUser.Id,\n                            username: connectUser.Username\n                        };\n                        needUpdate.push({PutRequest: this.usersRepo.createAgentCreateParam(agent)});\n                    }\n                });\n\n                dbUsers.forEach(dbUser => {\n                    const found = connectUsers.find(connectUser => connectUser.Id === dbUser.userId);\n                    if (!found) {\n                        needUpdate.push({DeleteRequest: this.usersRepo.createAgentDeleteParam(dbUser)});\n                    }\n                });\n\n                if(needUpdate.length > 0) {\n                    return this.usersRepo.batchWrite(needUpdate);\n                }\n            });\n    }\n\n    updateAgentById(agentId, update) {\n        return this._validateAgentUpdate(agentId, update)\n            .then(() => this.createAgentIfNeeded(agentId, update.extension))\n            .then(() => this.usersRepo.updateAgentById(agentId, update))\n            .then(() => this.getConnectAgentByUserId(agentId));\n    }\n\n    createAgentIfNeeded(agentId, extension) {\n        let createAgentPromise = this.usersRepo.getAgentByUserId(agentId).then(agent => {\n            if (agent === null) return this.usersRepo.createAgent(Agent.create(agentId, extension));\n            return agent;\n        });\n        if (extension) {\n            return this.usersRepo.getAgentByExtension(extension)\n                .then(agent => {\n                    if (agent != null && agent.userId !== agentId) {\n                        throw new ExtensionInUseError(extension);\n                    }\n                    return agent;\n                }).then(() => createAgentPromise);\n        } else {\n            return createAgentPromise;\n        }\n    }\n\n    _validateAgentUpdate(agentId, update) {\n        return new Promise((resolve, reject) => {\n            let {extension, deliverSMSPhoneNumber, deliverSMS, deliverEmail, encryptVoicemail, transcribeVoicemail} = update;\n            if (!agentId) {\n                reject(new MissingParameterError(\"agentId\"));\n                return;\n            }\n\n            if (deliverSMS === true && (deliverSMSPhoneNumber === undefined || deliverSMSPhoneNumber === \"\")) {\n                reject(new InvalidParameterError(\n                    \"Please provide a phone number for SMS delivery\",\n                    \"deliverSMSPhoneNumber cannot be null or empty if deliverSMS is true\"));\n                return;\n            }\n\n            if (deliverSMSPhoneNumber) {\n                let phone = new PhoneNumber(deliverSMSPhoneNumber);\n                if (!phone.isValid()) {\n                    reject(new GenericError(\n                        \"InvalidPhoneNumberError\",\n                        \"The phone number you've entered is invalid.  Please enter a valid phone number and try again.\",\n                        `Phone number cannot be validated for ${deliverSMSPhoneNumber}`\n                    ));\n                } else {\n                    update[\"deliverSMSPhoneNumber\"] = phone.getNumber();\n                }\n            }\n\n            if (update.hasOwnProperty(\"extension\") &&\n                (update[\"extension\"].length > 5 || Number.isNaN(update[\"extension\"]))) {\n                reject(new InvalidParameterError(\"Invalid extension number\", \"Extension number must be numeric and less than 5 digits.\"));\n                return;\n            }\n\n            if (!update.hasOwnProperty(\"extension\") ||\n                !update.hasOwnProperty(\"deliverSMS\") ||\n                !update.hasOwnProperty(\"deliverEmail\") ||\n                !update.hasOwnProperty(\"transcribeVoicemail\") ||\n                !update.hasOwnProperty(\"encryptVoicemail\")\n            ) {\n                reject(new MissingParametersError());\n                return;\n            }\n\n            resolve({\n                agentId,\n                update\n            });\n        });\n    }\n\n}\n\nexport {ConnectAgentService};","/******************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.                                           *                                                                                                                   *\n *  Licensed under the Apache License Version 2.0 (the 'License'). You may not\n *  use this file except in compliance with the License. A copy of the License\n *  is located at                                                            \n *                                                                                                                   \n *      http://www.apache.org/licenses/                                                                                   *                                                                                                                  \n *  or in the 'license' file accompanying this file. This file is distributed on\n *  an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or\n *  implied. See the License for the specific language governing permissions and\n *  limitations under the License.                                                                                \n******************************************************************************/\n\nclass ConnectUser {\n\n    constructor(userMap, detail = true) {\n        this.userId = userMap[\"Id\"];\n        this.arn = userMap[\"Arn\"];\n        this.username = userMap[\"Username\"];\n\n        if (!detail) {\n            return;\n        }\n\n        this.firstName = userMap[\"IdentityInfo\"][\"FirstName\"];\n        this.lastName = userMap[\"IdentityInfo\"][\"LastName\"];\n        this.email = userMap[\"IdentityInfo\"][\"Email\"];\n\n        if (userMap.hasOwnProperty(\"PhoneConfig\")) {\n            this.phoneType = userMap[\"PhoneConfig\"][\"PhoneType\"];\n            this.autoAccept = userMap[\"PhoneConfig\"][\"AutoAccept\"];\n            this.deskPhoneNumber = userMap[\"PhoneConfig\"][\"DeskPhoneNumber\"];\n        } else {\n            this.phoneType = null;\n            this.autoAccept = null;\n            this.deskPhoneNumber = null;\n        }\n\n        this.directoryUserId = userMap[\"DirectoryUserId\"];\n        this.routingProfileId = userMap[\"RoutingProfileId\"];\n    }\n\n    getFullName() {\n        return `${this.firstName} ${this.lastName}`;\n    }\n\n}\n\nexport {ConnectUser};","/******************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved. \n *  Licensed under the Apache License Version 2.0 (the 'License'). You may not\n *  use this file except in compliance with the License. A copy of the License\n *  is located at                                                            \n *                                                                              \n *      http://www.apache.org/licenses/                                        \n *  or in the 'license' file accompanying this file. This file is distributed on\n *  an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or\n *  implied. See the License for the specific language governing permissions and\n *  limitations under the License.                                              \n******************************************************************************/\n\nimport {ConnectUser} from \"../domain/connect-user.domain\";\n\nconst AWS = require('aws-sdk');\nconst delay = t => new Promise(resolve => setTimeout(resolve, t));\n\nclass ConnectService {\n\n    constructor() {\n        this.instanceId = process.env.AMAZON_CONNECT_INSTANCE_ARN.split('/')[1];\n        this.connect = new AWS.Connect();\n\n        // max backoff time set to 30 sec\n        this.maxBackOffTime = 30;\n    }\n\n\n    /**\n     * @returns {Promise<ConnectUser[]>}\n     */\n    getConnectUsers() {\n        return this.listConnectUsers()\n            .then(users => {\n                let promises = users.map(user => this.getConnectUser(user.Id));\n                return Promise.all(promises);\n            });\n    }\n\n    /**\n     *\n     * @param userId\n     * @returns {Promise<ConnectUser>}\n     */\n    getConnectUser(userId) {\n        return new Promise((resolve, reject) => {\n            let params = {\n                InstanceId: this.instanceId,\n                UserId: userId\n            };\n            this.connect.describeUser(params, (err, data) => {\n                if (err) {\n                    console.log(\"Error\", err);\n                    reject(err);\n                    return;\n                }\n                if (!data) {\n                    console.log(\"No user found\");\n                    reject(err);\n                    return;\n                }\n                resolve(new ConnectUser(data.User));\n            });\n        });\n    }\n\n    listConnectUsers() {\n        return this._listConnectUsers([], null, 0);\n    }\n\n\n    _listConnectUsers(list, nextToken, retry) {\n        let params = {\n            InstanceId: this.instanceId,\n            MaxResults: 100\n        };\n        if (nextToken) {\n            params[\"NextToken\"] = nextToken;\n        }\n\n        return this.connect.listUsers(params)\n            .promise()\n            .then(data => {\n                let {UserSummaryList, NextToken} = data;\n                let users = list.concat(UserSummaryList);\n                if (NextToken) {\n                    return this._listConnectUsers(users, NextToken, 0, callback);\n                } else {\n                    return users;\n                }\n            })\n            .catch(err => {\n                console.warn(\"list connect user failed\", err);\n                if (retry > 5) {\n                    throw err;\n                }\n\n                return delay(Math.min(Math.pow(retry, 2), this.maxBackOffTime))\n                    .then(() => {\n                        this._listConnectUsers(users, nextToken, retry + 1, callback);\n                    })\n            });\n    }\n\n}\n\nexport {ConnectService};","/******************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.                                           *                                                                                                                   *\n *  Licensed under the Apache License Version 2.0 (the 'License'). You may not\n *  use this file except in compliance with the License. A copy of the License\n *  is located at                                                            \n *                                                                                                                   \n *      http://www.apache.org/licenses/                                                                                   *                                                                                                                  \n *  or in the 'license' file accompanying this file. This file is distributed on\n *  an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or\n *  implied. See the License for the specific language governing permissions and\n *  limitations under the License.                                                                                \n******************************************************************************/\n\nclass GlobalSettings {\n\n    constructor(globalSettingsMap) {\n        this.transcribeVoicemail = globalSettingsMap[\"transcribeVoicemail\"] || false;\n        this.encryptVoicemail = globalSettingsMap[\"encryptVoicemail\"] || false;\n        this.deliveryEmail = globalSettingsMap[\"deliveryEmail\"] || null;\n        this.availableSMSCountries = globalSettingsMap[\"availableSMSCountries\"] || (process.env.AVAILABLE_SMS_COUNTRIES || \"\").split(\",\");\n    }\n\n}\n\nexport {GlobalSettings};","/******************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved. \n *  Licensed under the Apache License Version 2.0 (the 'License'). You may not\n *  use this file except in compliance with the License. A copy of the License\n *  is located at                                                            \n *                                                                              \n *      http://www.apache.org/licenses/                                        \n *  or in the 'license' file accompanying this file. This file is distributed on\n *  an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or\n *  implied. See the License for the specific language governing permissions and\n *  limitations under the License.                                              \n******************************************************************************/\n\nimport {DynamoDBService} from \"../lib/dynamo\";\nimport {GlobalSettings} from \"../domain/global-settings.domain\";\n\nclass GlobalRepo {\n\n    constructor() {\n        this.dynamo = new DynamoDBService(process.env.GLOBAL_TABLE_NAME);\n        this.amazonConnectInstanceArn = process.env.AMAZON_CONNECT_INSTANCE_ARN;\n    }\n\n    getGlobalSettings() {\n        console.log(\"Getting Global Settings\");\n        let params = {\n            Key: {\n                instanceArn: this.amazonConnectInstanceArn\n            }\n        };\n        return this.dynamo.getItem(params).then(item => {\n            return item ? new GlobalSettings(item) : null;\n        });\n    }\n\n    createGlobalSettings(transcribeVoicemail, encryptVoicemail, deliveryEmail, availableSMSCountries) {\n        let settings = new GlobalSettings({transcribeVoicemail, encryptVoicemail, deliveryEmail, availableSMSCountries});\n        settings.instanceArn = this.amazonConnectInstanceArn;\n        let params = {\n            Item: settings\n        };\n        console.log(\"dynamo put\");\n        return this.dynamo.put(params).then(() => settings);\n    }\n\n    updateGlobalSettings(transcribeVoicemail, encryptVoicemail, deliveryEmail, availableSMSCountries) {\n        return this.getGlobalSettings().then(settings => {\n            if (settings) {\n                return this._updateGlobalSettings(transcribeVoicemail, encryptVoicemail, deliveryEmail, availableSMSCountries);\n            } else {\n                console.log(\"in create\");\n                return this.createGlobalSettings(transcribeVoicemail, encryptVoicemail, deliveryEmail, availableSMSCountries);\n            }\n        });\n    }\n\n    _updateGlobalSettings(transcribeVoicemail, encryptVoicemail, deliveryEmail, availableSMSCountries) {\n        let params = {\n            Key: {\n                instanceArn: this.amazonConnectInstanceArn\n            },\n            ExpressionAttributeValues: {\n                \":tv\": transcribeVoicemail,\n                \":ev\": encryptVoicemail,\n                \":de\": deliveryEmail,\n                \":ac\": availableSMSCountries\n            },\n            UpdateExpression: \"SET transcribeVoicemail=:tv, encryptVoicemail=:ev, deliveryEmail=:de, availableSMSCountries=:ac\"\n        };\n        return this.dynamo.update(params);\n    }\n}\n\nexport {GlobalRepo};","/******************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.                                           *                                                                                                                   *\n *  Licensed under the Apache License Version 2.0 (the 'License'). You may not\n *  use this file except in compliance with the License. A copy of the License\n *  is located at                                                            \n *                                                                                                                   \n *      http://www.apache.org/licenses/                                                                                   *                                                                                                                  \n *  or in the 'license' file accompanying this file. This file is distributed on\n *  an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or\n *  implied. See the License for the specific language governing permissions and\n *  limitations under the License.                                                                                \n******************************************************************************/\n\nclass GenericError extends Error {\n    constructor(name, message, developerMessage) {\n        super();\n        this.message = message;\n        this.developerMessage = developerMessage;\n        this.name = name;\n    }\n}\n\nclass MissingParameterError extends GenericError {\n    constructor(parameter) {\n        super(\n            \"MissingParameterError\",\n            `Missing parameter`,\n            `Missing parameter: ${parameter}`\n        );\n    }\n}\n\nclass InvalidParameterError extends GenericError {\n    constructor(message, developerMessage) {\n        super(\n            \"InvalidParameterValueError\",\n            message,\n            developerMessage\n        );\n    }\n}\n\nclass MissingParametersError extends GenericError {\n    constructor() {\n        super(\n            \"MissingParametersError\",\n            `One or more parameters are missing`,\n            `You have one ore more parameters miss, please see documentation for more information.`\n        );\n    }\n}\n\nexport {\n    GenericError,\n    MissingParameterError,\n    InvalidParameterError,\n    MissingParametersError\n};","/******************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved. \n *  Licensed under the Apache License Version 2.0 (the 'License'). You may not\n *  use this file except in compliance with the License. A copy of the License\n *  is located at                                                            \n *                                                                              \n *      http://www.apache.org/licenses/                                        \n *  or in the 'license' file accompanying this file. This file is distributed on\n *  an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or\n *  implied. See the License for the specific language governing permissions and\n *  limitations under the License.                                              \n******************************************************************************/\n\nimport {DynamoDBService} from \"../lib/dynamo\";\n\nclass ContactVoicemailRepo {\n\n    constructor() {\n        this.dynamo = new DynamoDBService(process.env.CONTACT_VOICEMAIL_TABLE_NAME);\n    }\n\n    updateTranscriptionStatus(contactId, timestamp, status) {\n        // Query for all objects with the contact id\n        // Update each object with the new status\n        \n        let queryParam = {\n            KeyConditionExpression: 'contactId = :contactId',\n            ExpressionAttributeValues: {\n                ':contactId': contactId\n            }\n        };\n\n        return Promise.all([this.dynamo.query(queryParam)])\n            .then(values => {\n\n                let promises = [];\n                values[0].map(queryResult => {\n                    let params = {\n                        Key: {\n                            \"contactId\": contactId,\n                            \"readerId\": queryResult.readerId\n                        },\n                        ExpressionAttributeValues: {\n                            \":status\": status\n                        },\n                        UpdateExpression: \"SET transcribeStatus = :status\"\n                    };\n                    promises.push(this.dynamo.update(params));\n                });\n\n                return Promise.all(promises);\n            });\n    }\n\n}\n\nexport {ContactVoicemailRepo};\n","/******************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved. \n *  Licensed under the Apache License Version 2.0 (the 'License'). You may not\n *  use this file except in compliance with the License. A copy of the License\n *  is located at                                                            \n *                                                                              \n *      http://www.apache.org/licenses/                                        \n *  or in the 'license' file accompanying this file. This file is distributed on\n *  an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or\n *  implied. See the License for the specific language governing permissions and\n *  limitations under the License.                                              \n******************************************************************************/\n\nconst AWS = require('aws-sdk');\nimport nodemailer from 'nodemailer';\n\n\nclass DeliveryOptionSettings {\n    constructor(transcribe, encrypt) {\n        this.transcribe = transcribe;\n        this.encrypt = encrypt;\n    }\n}\n\nclass DeliveryContent {\n    constructor(transcription, preSignedUrl, audioFile) {\n        this.transcription = transcription;\n        this.preSignedUrl = preSignedUrl;\n        this.audioFile = audioFile;\n    }\n}\n\nclass NotificationService {\n\n    constructor(s3Service, transcriptionService) {\n        this.s3Service = s3Service;\n        this.transcriptionService = transcriptionService;\n        this.ses = new AWS.SES();\n        this.sns = new AWS.SNS();\n        this.transporter = nodemailer.createTransport({SES: this.ses});\n        this.recordingExpiration = parseInt(process.env.SIGNED_RECORDING_URL_EXP)\n    }\n\n    /**\n     *\n     * @param {GlobalSettings} globalSettings\n     * @param {ContactVoicemail} voicemail\n     * @param {ConnectAgent} connectAgent\n     * @return {Promise<Object>}\n     */\n    deliver(globalSettings, voicemail, connectAgent) {\n        let options = this.getTranscribeAndEncryptionSettings(globalSettings, voicemail);\n        let deliveryOptions = connectAgent.agent.deliveryOptions;\n        let shouldSendEmail = deliveryOptions.email;\n        let shouldSendSMS = deliveryOptions.sms.enabled;\n        let contactEmail = connectAgent.connectUser.email || connectAgent.connectUser.username; // For SSO instances\n        let agentSMSPhoneNumber = deliveryOptions.sms.phoneNumber;\n        let deliveryEmail = globalSettings.deliveryEmail;\n\n        if (!deliveryEmail) {\n            throw \"You must provide a delivery email\";\n        }\n\n        if (!shouldSendEmail && !shouldSendSMS) {\n            console.log(\"NOT sending email or sms\");\n            return Promise.resolve({message: \"Not sending Email or SNS\"});\n        } else {\n            if (shouldSendEmail && shouldSendSMS) {\n                console.log(`Should Send BOTH email and SMS`);\n                return this.getDeliveryContents(options, voicemail).then(contents => {\n                    return this.sendTextMessage(voicemail, agentSMSPhoneNumber, contents)\n                        .then(() => this.sendMail(voicemail, deliveryEmail, contactEmail, contents));\n                });\n            } else if (shouldSendSMS && agentSMSPhoneNumber) {\n                console.log(\"Send ONLY SMS\");\n                return Promise.resolve();\n            } else if (deliveryOptions.email) {\n                console.log(\"Send ONLY Email\");\n                return this.getDeliveryContents(options, voicemail).then(contents => {\n                    return this.sendMail(voicemail, deliveryEmail, contactEmail, contents);\n                });\n            } else {\n                return Promise.resolve({message: \"Undeliverable\"});\n            }\n        }\n    }\n\n    /**\n     * @param {ContactVoicemail} voicemail\n     * @param {DeliveryOptionSettings} options\n     * @returns {Promise<DeliveryContent>}\n     */\n    getDeliveryContents(options, voicemail) {\n        console.log(\"Getting Delivery Contents\");\n\n        let transcriptionPromise = Promise.resolve(null);\n        let preSignedUrlPromise = Promise.resolve(null);\n        let audioFilePromise = Promise.resolve(null);\n\n        if (options.encrypt) {\n            console.log(\"Encrypt...\");\n            preSignedUrlPromise = this.s3Service.getPreSignedUrl(voicemail.recordingBucketName, voicemail.recordingObjectKey, this.recordingExpiration);\n        } else {\n            console.log(\"Unencrypted...\");\n            audioFilePromise = this.s3Service.getFile(voicemail.recordingBucketName, voicemail.recordingObjectKey);\n        }\n\n        if (options.transcribe) {\n            console.log(\"Transcribe...\");\n            let jobName = voicemail.getTranscriptJobName();\n            transcriptionPromise = this.transcriptionService.getTranscriptForJobName(jobName);\n        }\n\n        return Promise\n            .all([transcriptionPromise, preSignedUrlPromise, audioFilePromise])\n            .then(result => {\n                let transcription = result[0];\n                let preSignedUrl = result[1];\n                let audioFile = result[2];\n                return new DeliveryContent(transcription, preSignedUrl, audioFile);\n            });\n    }\n\n    /**\n     *\n     * @param {ContactVoicemail} voicemail\n     * @param {string} fromEmailAddress\n     * @param {string} toEmailAddress\n     * @param {DeliveryContent} deliveryContent\n     */\n    sendMail(voicemail, fromEmailAddress, toEmailAddress, deliveryContent) {\n        return new Promise((resolve, reject) => {\n            let voicemailDate = new Date(voicemail.timestamp * 1000);\n\n            // Date\n            let html = `<p>${voicemailDate}</p>`;\n            html += `<p>New voicemail from ${voicemail.contactPhoneNumber}.</p>`;\n\n            // Transcript\n            if (deliveryContent.transcription) {\n                html += `<b>Voicemail Transcript:</b><p>${deliveryContent.transcription.transcripts[0].transcript}</p>`;\n            }\n\n            // Voicemail\n            html += `<b>Voicemail:</b>`;\n            if (deliveryContent.preSignedUrl) {\n                // Expiration Date\n                let expirationDate = new Date(Math.floor((Date.now() / 1000) + deliveryContent.preSignedUrl.expires) * 1000);\n                html += `<p>Voicemail Expiration Date: ${expirationDate}</p>`;\n\n                // Audio Link\n                let audioLink = `<p><a href=\"${deliveryContent.preSignedUrl.url}\">Click Here</a> to listen to the voicemail</p>`;\n                html += audioLink;\n            }\n\n            let mailOptions = {\n                from: fromEmailAddress,\n                subject: `New voicemail from ${voicemail.contactPhoneNumber}`,\n                html,\n                to: toEmailAddress\n            };\n\n            // Audio Attachment\n            if (deliveryContent.audioFile) {\n                mailOptions[\"attachments\"] = [{\n                    filename: \"voicemail.wav\",\n                    content: deliveryContent.audioFile.Body\n                }];\n            }\n\n            this.transporter.sendMail(mailOptions, (err, info) => {\n                if (err) {\n                    console.log(err);\n                    reject(err);\n                    return;\n                }\n                resolve(info);\n            });\n        });\n    }\n\n    /**\n     *\n     * @param {ContactVoicemail} voicemail\n     * @param {string} deliveryPhoneNumber\n     * @param {DeliveryContent} deliveryContent\n     */\n    sendTextMessage(voicemail, deliveryPhoneNumber, deliveryContent) {\n        return new Promise((resolve, reject) => {\n\n            let message = `Amazon Connect voicemail from ${voicemail.contactPhoneNumber}\\n`;\n\n            // Transcript\n            if (deliveryContent.transcription) {\n                message += `\\nTranscript: \"${deliveryContent.transcription.transcripts[0].transcript}\"\\n`;\n            }\n\n            if (deliveryContent.preSignedUrl) {\n                // Expiration Date\n                let expirationDate = new Date(Math.floor((Date.now() / 1000) + deliveryContent.preSignedUrl.expires) * 1000);\n                message += `\\nVoicemail Expiration Date: ${expirationDate}\\n`;\n\n                // Audio Link\n                let audioLink = `${deliveryContent.preSignedUrl.url}`;\n                message += audioLink;\n            }\n\n            let params = {\n                Message: message,\n                PhoneNumber: deliveryPhoneNumber\n            };\n\n            this.sns.publish(params, (err, data) => {\n                if (err) {\n                    console.log(`Error: ${err}`);\n                }\n                resolve(data);\n            });\n        });\n\n    }\n\n    /**\n     *\n     * @param {GlobalSettings} globalSettings\n     * @param {ContactVoicemail} voicemail\n     * @returns DeliveryOptionSettings\n     */\n    getTranscribeAndEncryptionSettings(globalSettings, voicemail) {\n        let transcribe = false;\n        let encrypt = true;\n\n        if (globalSettings.transcribeVoicemail === true) {\n            transcribe = voicemail.shouldTranscribe;\n        }\n\n        if (globalSettings.encryptVoicemail === false) {\n            encrypt = voicemail.shouldEncrypt;\n        }\n\n        return new DeliveryOptionSettings(transcribe, encrypt);\n    }\n\n}\n\nexport {NotificationService, DeliveryOptionSettings};","module.exports = require(\"nodemailer\");","/******************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved. \n *  Licensed under the Apache License Version 2.0 (the 'License'). You may not\n *  use this file except in compliance with the License. A copy of the License\n *  is located at                                                            \n *                                                                              \n *      http://www.apache.org/licenses/                                        \n *  or in the 'license' file accompanying this file. This file is distributed on\n *  an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or\n *  implied. See the License for the specific language governing permissions and\n *  limitations under the License.                                              \n******************************************************************************/\n\nconst AWS = require('aws-sdk');\n\nclass S3Service {\n\n    constructor() {\n        this.s3 = new AWS.S3();\n    }\n\n    getFile(bucket, key) {\n        let params = {\n            Bucket: bucket,\n            Key: key\n        };\n        return this.s3.getObject(params).promise();\n    }\n\n    getPreSignedUrl(bucket, key, expires=900) {\n        return new Promise((resolve, reject) => {\n            let params = {\n                Bucket: bucket,\n                Key: key,\n                Expires: expires\n            };\n            return this.s3.getSignedUrl('getObject', params, (err, url) => {\n                if (err) {\n                    reject(err);\n                    return;\n                }\n                resolve({\n                    url,\n                    expires\n                });\n            });\n        });\n    }\n}\n\nexport {S3Service};","/******************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved. \n *  Licensed under the Apache License Version 2.0 (the 'License'). You may not\n *  use this file except in compliance with the License. A copy of the License\n *  is located at                                                            \n *                                                                              \n *      http://www.apache.org/licenses/                                        \n *  or in the 'license' file accompanying this file. This file is distributed on\n *  an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or\n *  implied. See the License for the specific language governing permissions and\n *  limitations under the License.                                              \n******************************************************************************/\n\nconst AWS = require('aws-sdk');\nimport rp from 'request-promise';\n\nclass TranscriptionService {\n\n    constructor() {\n        this.transcribe = new AWS.TranscribeService();\n    }\n\n    getTranscriptForJobName(jobName) {\n        let params = {\n            TranscriptionJobName: jobName\n        };\n        return this.transcribe\n            .getTranscriptionJob(params).promise()\n            .then(transcriptionJob => {\n                let options = {\n                    method: 'GET',\n                    uri: transcriptionJob.TranscriptionJob.Transcript.TranscriptFileUri,\n                    json: true\n                };\n                return rp(options).then(transcript => {\n                    return {\n                        transcriptionJob,\n                        transcripts: transcript.results.transcripts || null\n                    };\n                });\n            })\n            .catch(err => {\n                console.log(err);\n            });\n    }\n}\n\nexport {TranscriptionService};","module.exports = require(\"request-promise\");","/******************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.                                           *                                                                                                                   *\n *  Licensed under the Apache License Version 2.0 (the 'License'). You may not\n *  use this file except in compliance with the License. A copy of the License\n *  is located at                                                            \n *                                                                                                                   \n *      http://www.apache.org/licenses/                                                                                   *                                                                                                                  \n *  or in the 'license' file accompanying this file. This file is distributed on\n *  an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or\n *  implied. See the License for the specific language governing permissions and\n *  limitations under the License.                                                                                \n******************************************************************************/\n\nclass ContactVoicemail {\n\n    constructor(voicemailMap) {\n        this.contactId = voicemailMap[\"contactId\"];\n        this.timestamp = voicemailMap[\"timestamp\"];\n        this.agentId = voicemailMap[\"readerId\"];\n        this.contactPhoneNumber = voicemailMap[\"contactPhoneNumber\"];\n        this.shouldTranscribe = voicemailMap[\"shouldTranscribe\"] || false;\n        this.shouldEncrypt = voicemailMap[\"shouldEncrypt\"] || false;\n        this.transcribeStatus = voicemailMap[\"transcribeStatus\"];\n        this.recordingUrl = voicemailMap[\"recordingUrl\"];\n        this.recordingBucketName = voicemailMap[\"recordingBucketName\"];\n        this.recordingObjectKey = voicemailMap[\"recordingObjectKey\"];\n        this.recordingBucketRegion = voicemailMap[\"recordingBucketRegion\"];\n    }\n\n    getTranscriptJobName() {\n        return `${this.contactId}_${this.timestamp}`;\n    }\n\n}\n\nexport {ContactVoicemail};","/******************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved. \n *  Licensed under the Apache License Version 2.0 (the 'License'). You may not\n *  use this file except in compliance with the License. A copy of the License\n *  is located at                                                            \n *                                                                              \n *      http://www.apache.org/licenses/                                        \n *  or in the 'license' file accompanying this file. This file is distributed on\n *  an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or\n *  implied. See the License for the specific language governing permissions and\n *  limitations under the License.                                              \n******************************************************************************/\n\nimport {ContactVoicemail} from \"../domain/voicemail.domain\";\n\nclass ContactVoicemailService {\n\n    constructor(voicemailRepo, agentService, notificationService, globalSettingsService) {\n        this.voicemailRepo = voicemailRepo;\n        this.agentService = agentService;\n        this.notificationService = notificationService;\n        this.globalSettingsService = globalSettingsService;\n    }\n\n    updateVoicemailTranscriptStatus(jobName, status) {\n        let jobNameSplit = jobName.split(\"_\");\n        let contactId = jobNameSplit[0];\n        let timestamp = parseInt(jobNameSplit[1]);\n        return this.voicemailRepo.updateTranscriptionStatus(contactId, timestamp, status);\n    }\n\n    processVoicemailRecords(eventName, newRecord, oldRecord) {\n        console.log(\"Processing Voicemail Recording\");\n        let newVoicemail = new ContactVoicemail(newRecord);\n        let oldVoicemail = new ContactVoicemail(oldRecord);\n\n        let transcribeCompleted = (oldVoicemail.transcribeStatus === \"IN_PROGRESS\" && newVoicemail.transcribeStatus === \"COMPLETED\");\n        if (transcribeCompleted) {\n            return this._deliver(newVoicemail);\n        } else if (newVoicemail.transcribeStatus === null || newVoicemail.transcribeStatus === undefined) {\n            return this._deliver(newVoicemail);\n        } else {\n            return Promise.resolve({message: \"Unhandled Resolution\"});\n        }\n    }\n\n    _deliver(voicemail) {\n        return Promise.all([this.globalSettingsService.getSettings(), this.agentService.getConnectAgentByUserId(voicemail.agentId)])\n            .then(result => {\n                let globalSettings = result[0];\n                let connectAgent = result[1];\n                return this.notificationService.deliver(globalSettings, voicemail, connectAgent);\n            });\n    }\n\n}\n\nexport {ContactVoicemailService};","module.exports = require(\"aws-sdk\");","/******************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved. \n *  Licensed under the Apache License Version 2.0 (the 'License'). You may not\n *  use this file except in compliance with the License. A copy of the License\n *  is located at                                                            \n *                                                                              \n *      http://www.apache.org/licenses/                                        \n *  or in the 'license' file accompanying this file. This file is distributed on\n *  an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or\n *  implied. See the License for the specific language governing permissions and\n *  limitations under the License.                                              \n******************************************************************************/\n\nconst AWS = require(\"aws-sdk\");\n\nclass DynamoDBService {\n\n    constructor(tableName) {\n        this.tableName = tableName;\n        this.client = new AWS.DynamoDB.DocumentClient();\n    }\n\n    /**\n     * @param params\n     * @returns {Promise<Object>}\n     */\n    update(params) {\n        params[\"TableName\"] = this.tableName;\n        params[\"ReturnValues\"] = \"ALL_NEW\";\n        return this.client.update(params).promise();\n    }\n\n    put(params) {\n        params[\"TableName\"] = this.tableName;\n        return this.client.put(params).promise();\n    }\n\n    /**\n     * @param params\n     * @returns {Promise<DocumentClient.AttributeMap[] | null>}\n     */\n    query(params) {\n        params[\"TableName\"] = this.tableName;\n        return this.client.query(params).promise().then(result => result.Items || null);\n    }\n\n    scan(params) {\n        params[\"TableName\"] = this.tableName;\n        return this.client.scan(params).promise().then(result => {\n            return result.Items || null\n        });\n    }\n\n    queryWithNext(params) {\n      params[\"TableName\"] = this.tableName;\n      return this.client.query(params).promise().then(result => {\n        let data = {\n          data: result.Items || []\n        };\n        if(result.LastEvaluatedKey) {\n          data.next = Buffer.from(JSON.stringify(result.LastEvaluatedKey), 'utf8').toString('base64');\n        }\n        return data;\n      });\n    }\n\n    scanWithNext(params) {\n        params[\"TableName\"] = this.tableName;\n        return this.client.scan(params).promise().then(result => {\n            let data = {\n                data: result.Items || []\n            };\n            if(result.LastEvaluatedKey) {\n                data.next = Buffer.from(JSON.stringify(result.LastEvaluatedKey), 'utf8').toString('base64');\n            }\n            return data;\n        });\n    }\n\n    /**\n     * @param params\n     * @param callback\n     * @returns {Promise<DocumentClient.AttributeMap | null>}\n     */\n    getItem(params, callback) {\n        params[\"TableName\"] = this.tableName;\n        return this.client.get(params).promise().then(result => result.Item || null);\n    }\n\n    batchWrite(batch, startingIndex) {\n        return new Promise((resolve, reject) => {\n            this._batchWrite(batch, startingIndex).then(result => {\n                if (batch.length > result.index) {\n                    this.batchWrite(batch, result.index).then(nextData => {\n                        resolve(nextData);\n                    });\n                } else {\n                    resolve(result.data);\n                }\n            });\n        });\n    }\n\n    _batchWrite(batch, startingIndex) {\n        return new Promise((resolve, reject) => {\n            // DDB has a limit of 25 items at once\n            let maxDdbUpdate = 5;\n            let endIndex = (batch.length > startingIndex + maxDdbUpdate) ? startingIndex + maxDdbUpdate : batch.length;\n            let batchToUpdate = batch.slice(startingIndex, endIndex);\n\n            let batchParam = {\n                RequestItems: {\n                    [this.tableName]: batchToUpdate\n                }\n            };\n            this.client.batchWrite(batchParam, (err, data) => {\n                if (err) {\n                    console.log(\"Any error? \" + JSON.stringify(err, null, 2));\n                }\n                resolve({'index': startingIndex + maxDdbUpdate, 'data': data});\n            });\n        });\n    }\n}\n\nexport {DynamoDBService};","/******************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.                                           *                                                                                                                   *\n *  Licensed under the Apache License Version 2.0 (the 'License'). You may not\n *  use this file except in compliance with the License. A copy of the License\n *  is located at                                                            \n *                                                                                                                   \n *      http://www.apache.org/licenses/                                                                                   *                                                                                                                  \n *  or in the 'license' file accompanying this file. This file is distributed on\n *  an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or\n *  implied. See the License for the specific language governing permissions and\n *  limitations under the License.                                                                                \n******************************************************************************/\n\nclass Agent {\n\n    constructor(agentMap) {\n        this.userId = agentMap[\"userId\"];\n        this.extension = agentMap[\"extension\"];\n        this.username = agentMap[\"username\"];\n        this.transcribeVoicemail = agentMap[\"transcribeVoicemail\"] || false;\n        this.encryptVoicemail = agentMap[\"encryptVoicemail\"] || false;\n        this.deliveryOptions = agentMap[\"deliveryOptions\"] || {\n            sms: {\n                enabled: false,\n                phoneNumber: null\n            },\n            email: false\n        };\n    }\n\n    static create(userId, extension = null) {\n        return new Agent({\n            userId, extension: extension, deliveryOptions: {\n                sms: {\n                    enabled: false,\n                    phoneNumber: null\n                },\n                email: false\n            }\n        });\n    }\n\n}\n\nexport {Agent};","/******************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.                                           *                                                                                                                   *\n *  Licensed under the Apache License Version 2.0 (the 'License'). You may not\n *  use this file except in compliance with the License. A copy of the License\n *  is located at                                                            \n *                                                                                                                   \n *      http://www.apache.org/licenses/                                                                                   *                                                                                                                  \n *  or in the 'license' file accompanying this file. This file is distributed on\n *  an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or\n *  implied. See the License for the specific language governing permissions and\n *  limitations under the License.                                                                                \n******************************************************************************/\n\nimport {NotificationService} from \"../service/notification.service\";\n\nconst AWS = require(\"aws-sdk\");\n\nimport {ConnectAgentService} from \"../service/connect-agent.service\";\nimport {ContactVoicemailRepo} from \"../repo/voicemail.repo\";\nimport {ContactVoicemailService} from \"../service/voicemail.service\";\nimport {UsersRepo} from \"../repo/users-repo\";\nimport {ConnectService} from \"../service/connect.service\";\nimport {S3Service} from \"../service/s3.service\";\nimport {TranscriptionService} from \"../service/transcription.service\";\nimport {GlobalSettingsService} from \"../service/global-settings.services\";\nimport {GlobalRepo} from \"../repo/global-repo\";\n\nconst usersRepo = new UsersRepo();\nconst globalRepo = new GlobalRepo();\nconst voicemailService = new ContactVoicemailService(\n    new ContactVoicemailRepo(),\n    new ConnectAgentService(new ConnectService(), usersRepo),\n    new NotificationService(new S3Service(), new TranscriptionService()),\n    new GlobalSettingsService(globalRepo)\n);\n\nexports.stream = async (event, context) => {\n    let {Records} = event;\n    let promises = Records.map(async (record) => {\n        let eventName = record.eventName;\n        let newRecord = AWS.DynamoDB.Converter.unmarshall(record.dynamodb.NewImage);\n        let oldRecord = AWS.DynamoDB.Converter.unmarshall(record.dynamodb.OldImage);\n        return await voicemailService.processVoicemailRecords(eventName, newRecord, oldRecord);\n    });\n\n    try {\n        let result = await Promise.all(promises);\n        return {\n            lambdaResult: \"Success\"\n        };\n    } catch (err) {\n        console.log(err);\n        return {\n            error: err\n        };\n    }\n};","module.exports = require(\"awesome-phonenumber\");"],"sourceRoot":""}